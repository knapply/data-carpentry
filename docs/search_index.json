[
["index.html", "Data Carpentry The Craft of Working with Data Welcome", " Data Carpentry The Craft of Working with Data Brendan Knapp and Christopher Callaghan 2020-10-02 Welcome Test &lt;- == != test &lt;- &quot;face&quot; "],
["preface.html", "Preface", " Preface init "],
["setup-r-and-rstudio.html", "1 R and RStudio 1.1 R 1.2 RStudio", " 1 R and RStudio 1.1 R 1.1.1 Installation https://cran.r-project.org/ 1.2 RStudio 1.2.1 Installation https://rstudio.com/products/rstudio/download/ "],
["basic-syntax.html", "2 Basic Syntax 2.1 Arithmetic 2.2 Comments 2.3 Variables 2.4 Multiple Values 2.5 Functions", " 2 Basic Syntax &quot;Hello, World!&quot; #&gt; [1] &quot;Hello, World!&quot; 2.1 Arithmetic 1 + 1 #&gt; [1] 2 1 + 1 * 3 #&gt; [1] 4 (1 + 1) * 3 #&gt; [1] 6 If your code doesn’t form a complete expression, then R will look for the rest of on the next line. Here’s an example: 1 + R says “1 +… what??” and if you run the code it will output something like the following: &gt; 1 + + If you see this, press the escape/Esc key. 2.2 Comments # comments start with `#` # R doesn&#39;t think comments are code! # so we can annotate our code! # here&#39;s a (contrived) example! -1 * -1000 # a negative number times a negative is positive #&gt; [1] 1000 2.3 Variables my_first_var &lt;- &quot;referring to data w/ names is handy!&quot; my_first_var #&gt; [1] &quot;referring to data w/ names is handy!&quot; 2.4 Multiple Values c(1, 2, 3, 4, 5, 6) # `c()` is short for &quot;combine&quot; #&gt; [1] 1 2 3 4 5 6 1:6 # `:` lets us create sequences #&gt; [1] 1 2 3 4 5 6 my_first_vector_var &lt;- -10:10 # we&#39;ll explain `vector`s later, my_first_vector_var #&gt; [1] -10 -9 -8 -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 #&gt; [20] 9 10 2.5 Functions sqrt(x = 16) #&gt; [1] 4 # ^^ name of function letters #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; #&gt; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; toupper(x = letters) #&gt; [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; #&gt; [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # ^ parameter or formal (argument) LETTERS #&gt; [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; #&gt; [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; tolower(x = letters) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; #&gt; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; # ^^^^^^^ argument (always) We refer to x = letters as a named argument because we specify the parameter (x) to which we’re passing our argument (letters), but we often don’t specify the name of a parameter. tolower(letters) #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; #&gt; [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; We can’t screw up too easily since tolower() and toupper() only have one paramter (x), but many functions can take multiple arguments. Let’s say we have a vector of unsorted numbers: unsorted_numbers &lt;- c(3, 2, 10, 8, 1, 4, 9, 6, 5, 7) unsorted_numbers #&gt; [1] 3 2 10 8 1 4 9 6 5 7 Like most languages, R has a built-in sort() function we can use, which works like so: sort(unsorted_numbers) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 By default, sort() sorts in ascending order, but we oftentimes will want to sort in descending (or decreasing) order. Rather than having a separate function called sort_decreasing(), we pass an argument to sort()’s decreasing parameter. sort(x = unsorted_numbers, decreasing = TRUE) #&gt; [1] 10 9 8 7 6 5 4 3 2 1 Even though sort() has multiple parameters, we can still skip the bames if we pass our arguments by position. sort(unsorted_numbers, TRUE) #&gt; [1] 10 9 8 7 6 5 4 3 2 1 Considering that x is sort()’s first parameter, and decreaing is sort()’s second parameter, we can pass our arguments (unsorted_numbers and TRUE) in the same order and R will know what we meant. We can also mix positional and named arguments, and often do. sort(unsorted_numbers, decreasing = TRUE) #&gt; [1] 10 9 8 7 6 5 4 3 2 1 You’re hopefully wondering “How could we know the order of sort()’s parameters?” which leads us to documentation. If you want more information on a specific function, you should check out the documentation, which you can do with ? or help(). Here’s what that looks like for sort() ?sort There’s a ton of information here, but all we’re interested in at the moment is the order in which we need to pass arguments to sort(), which we can find in the Arguments section. We’ll cover functions in far more detail later, but sometimes it’s easier to see the how the function is defined, which we can by running sort without (). sort #&gt; function (x, decreasing = FALSE, ...) #&gt; { #&gt; if (!is.logical(decreasing) || length(decreasing) != 1L) #&gt; stop(&quot;&#39;decreasing&#39; must be a length-1 logical vector.\\nDid you intend to set &#39;partial&#39;?&quot;) #&gt; UseMethod(&quot;sort&quot;) #&gt; } #&gt; &lt;bytecode: 0x55b222ab4368&gt; #&gt; &lt;environment: namespace:base&gt; Only pay attention to the first line right now, which is where you’ll see the following: function (x, decreasing = FALSE, ...) This tells us x is the sort()’s first parameter and decreasing is its second parameter. "],
["tabular-data.html", "3 Tabular Data 3.1 Basics 3.2 Common Pitfalls", " 3 Tabular Data Aliases: Tabular files Flat Delimited Includes: Comma-Separated Value (.csv) Tab-Separated Value (.tsv) 3.1 Basics library(readr) Here’s some example data, modified from http://www.gapminder.org/data/ country,continent,year,lifeExp,pop,gdpPercap # header/column names, separated by commas Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 # comma-separated values Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448 csv_text &lt;- &#39;country,continent,year,lifeExp,pop,gdpPercap Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448&#39; csv_file &lt;- tempfile(fileext = &quot;.csv&quot;) csv_file # a temporary file path #&gt; [1] &quot;/tmp/RtmpF0Nbt3/file9405503f1bc.csv&quot; writeLines(text = csv_text, con = csv_file) # write `csv_text` to `csv_file` read_csv(file = csv_file) #&gt; Parsed with column specification: #&gt; cols( #&gt; country = col_character(), #&gt; continent = col_character(), #&gt; year = col_double(), #&gt; lifeExp = col_double(), #&gt; pop = col_double(), #&gt; gdpPercap = col_double() #&gt; ) #&gt; # A tibble: 8 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1952 28.8 8425333 779. #&gt; 2 Afghanistan Asia 1957 30.3 9240934 821. #&gt; 3 Afghanistan Asia 1962 32.0 10267083 853. #&gt; 4 Afghanistan Asia 1967 34.0 11537966 836. #&gt; 5 Afghanistan Asia 1972 36.1 13079460 740. #&gt; 6 Afghanistan Asia 1977 38.4 14880372 786. #&gt; # … with 2 more rows You may encounter Tab-Delimited data where values are separated by \\t instead of ,. Instead of readr::read_csv(), we can use readr::read_tsv(). tsv_text &lt;- &#39;country\\tcontinent\\tyear\\tlifeExp\\tpop\\tgdpPercap Afghanistan\\tAsia\\t1952\\t28.801\\t8425333\\t779.4453145 Afghanistan\\tAsia\\t1957\\t30.332\\t9240934\\t820.8530296 Afghanistan\\tAsia\\t1962\\t31.997\\t10267083\\t853.10071 Afghanistan\\tAsia\\t1967\\t34.02\\t11537966\\t836.1971382 Afghanistan\\tAsia\\t1972\\t36.088\\t13079460\\t739.9811058 Afghanistan\\tAsia\\t1977\\t38.438\\t14880372\\t786.11336 Afghanistan\\tAsia\\t1982\\t39.854\\t12881816\\t978.0114388 Afghanistan\\tAsia\\t1987\\t40.822\\t13867957\\t852.3959448&#39; tsv_file &lt;- tempfile(fileext = &quot;.tsv&quot;) writeLines(text = tsv_text, con = tsv_file) read_tsv(file = tsv_file) #&gt; Parsed with column specification: #&gt; cols( #&gt; country = col_character(), #&gt; continent = col_character(), #&gt; year = col_double(), #&gt; lifeExp = col_double(), #&gt; pop = col_double(), #&gt; gdpPercap = col_double() #&gt; ) #&gt; # A tibble: 8 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1952 28.8 8425333 779. #&gt; 2 Afghanistan Asia 1957 30.3 9240934 821. #&gt; 3 Afghanistan Asia 1962 32.0 10267083 853. #&gt; 4 Afghanistan Asia 1967 34.0 11537966 836. #&gt; 5 Afghanistan Asia 1972 36.1 13079460 740. #&gt; 6 Afghanistan Asia 1977 38.4 14880372 786. #&gt; # … with 2 more rows If we find ourselves reading delmited data that uses something other than \\t or , to separate values, we can use readr::read_delim(). pipe_separated_values_text &lt;- &#39;country|continent|year|lifeExp|pop|gdpPercap Afghanistan|Asia|1952|28.801|8425333|779.4453145 Afghanistan|Asia|1957|30.332|9240934|820.8530296 Afghanistan|Asia|1962|31.997|10267083|853.10071 Afghanistan|Asia|1967|34.02|11537966|836.1971382 Afghanistan|Asia|1972|36.088|13079460|739.9811058 Afghanistan|Asia|1977|38.438|14880372|786.11336 Afghanistan|Asia|1982|39.854|12881816|978.0114388 Afghanistan|Asia|1987|40.822|13867957|852.3959448&#39; psv_file &lt;- tempfile(fileext = &quot;.tsv&quot;) writeLines(text = pipe_separated_values_text, con = psv_file) read_delim(file = psv_file, delim = &quot;|&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; country = col_character(), #&gt; continent = col_character(), #&gt; year = col_double(), #&gt; lifeExp = col_double(), #&gt; pop = col_double(), #&gt; `gdpPercap ` = col_double() #&gt; ) #&gt; # A tibble: 8 x 6 #&gt; country continent year lifeExp pop `gdpPercap ` #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1952 28.8 8425333 779. #&gt; 2 Afghanistan Asia 1957 30.3 9240934 821. #&gt; 3 Afghanistan Asia 1962 32.0 10267083 853. #&gt; 4 Afghanistan Asia 1967 34.0 11537966 836. #&gt; 5 Afghanistan Asia 1972 36.1 13079460 740. #&gt; 6 Afghanistan Asia 1977 38.4 14880372 786. #&gt; # … with 2 more rows country,continent,year,lifeExp,pop,gdpPercap # header/column names Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448 Afghanistan,,,N/A,, # notice that we&#39;re missing values csv_text &lt;- &#39;country,continent,year,lifeExp,pop,gdpPercap Afghanistan,Asia,1952,28.801,8425333,779.4453145 Afghanistan,Asia,1957,30.332,9240934,820.8530296 Afghanistan,Asia,1962,31.997,10267083,853.10071 Afghanistan,Asia,1967,34.02,11537966,836.1971382 Afghanistan,Asia,1972,36.088,13079460,739.9811058 Afghanistan,Asia,1977,38.438,14880372,786.11336 Afghanistan,Asia,1982,39.854,12881816,978.0114388 Afghanistan,Asia,1987,40.822,13867957,852.3959448 Afghanistan,,,N/A,,&#39; csv_file &lt;- tempfile(fileext = &quot;.csv&quot;) writeLines(text = csv_text, con = csv_file) 3.2 Common Pitfalls 3.2.1 Incorrect Column Types data_frame_from_csv &lt;- read_csv(file = csv_file) #&gt; Parsed with column specification: #&gt; cols( #&gt; country = col_character(), #&gt; continent = col_character(), #&gt; year = col_double(), #&gt; lifeExp = col_character(), #&gt; pop = col_double(), #&gt; gdpPercap = col_double() #&gt; ) data_frame_from_csv #&gt; # A tibble: 9 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1952 28.801 8425333 779. #&gt; 2 Afghanistan Asia 1957 30.332 9240934 821. #&gt; 3 Afghanistan Asia 1962 31.997 10267083 853. #&gt; 4 Afghanistan Asia 1967 34.02 11537966 836. #&gt; 5 Afghanistan Asia 1972 36.088 13079460 740. #&gt; 6 Afghanistan Asia 1977 38.438 14880372 786. #&gt; # … with 3 more rows Notice that our year column says &lt;dbl&gt;, referring to it being of type double, yet all of our year values are whole numbers. typeof(data_frame_from_csv$year) #&gt; [1] &quot;double&quot; data_frame_from_csv$year #&gt; [1] 1952 1957 1962 1967 1972 1977 1982 1987 NA We also have \"N/A\" in our lifeExp column, forcing R to interpret all lifeExp values as characters (&lt;chr&gt;). typeof(data_frame_from_csv$lifeExp) #&gt; [1] &quot;character&quot; data_frame_from_csv$lifeExp #&gt; [1] &quot;28.801&quot; &quot;30.332&quot; &quot;31.997&quot; &quot;34.02&quot; &quot;36.088&quot; &quot;38.438&quot; &quot;39.854&quot; &quot;40.822&quot; &quot;N/A&quot; 3.2.1.1 Solution read_csv( file = csv_file, col_types = cols( country = col_character(), continent = col_character(), year = col_integer(), # read `year` as `integer` lifeExp = col_double(), # read `lifeExp` as `double` pop = col_double(), gdpPercap = col_double() ), na = c(&quot;&quot;, &quot;N/A&quot;) # be explicit about how `csv_file` represents missing values ) #&gt; # A tibble: 9 x 6 #&gt; country continent year lifeExp pop gdpPercap #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Afghanistan Asia 1952 28.8 8425333 779. #&gt; 2 Afghanistan Asia 1957 30.3 9240934 821. #&gt; 3 Afghanistan Asia 1962 32.0 10267083 853. #&gt; 4 Afghanistan Asia 1967 34.0 11537966 836. #&gt; 5 Afghanistan Asia 1972 36.1 13079460 740. #&gt; 6 Afghanistan Asia 1977 38.4 14880372 786. #&gt; # … with 3 more rows "],
["manipulating-data-frames.html", "4 Manipulating Data Frames 4.1 select() Columns 4.2 filter() Rows 4.3 arrange() Rows", " 4 Manipulating Data Frames library(tidyverse, warn.conflicts = FALSE) #&gt; ── Attaching packages ──────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── #&gt; ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 #&gt; ✓ tibble 3.0.3 ✓ dplyr 1.0.2 #&gt; ✓ tidyr 1.1.2 ✓ stringr 1.4.0 #&gt; ✓ readr 1.3.1 ✓ forcats 0.5.0 #&gt; ── Conflicts ─────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── #&gt; x dplyr::filter() masks stats::filter() #&gt; x dplyr::lag() masks stats::lag() df &lt;- tibble( group = c(&quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;), a = c(1, 4, NA, 3, 5), b = c(9, NA, 8, 10, 7), c = c(TRUE, FALSE, NA, FALSE, TRUE), d = c(LETTERS[1:3], NA, LETTERS[[5]]), e = factor(1:5, labels = c(&quot;tiny&quot;, &quot;small&quot;, &quot;medium&quot;, &quot;big&quot;, &quot;huge&quot;)), f_col = c(as.Date(NA), as.Date(&quot;2020-09-23&quot;) + c(3, 2, 1, 4)), g_col = c(as.POSIXct(&quot;2020-09-23 00:00:00&quot;) + 1:4 * 60 * 60 * 24 * 1.1, NA), col_h = list(c(1, 10), c(2, NA), c(3, 8), c(4, 7), c(5, 6)), col_i = list(NULL, pi, month.abb[6:10], iris, as.matrix(mtcars)) ) df #&gt; # A tibble: 5 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; glimpse(df) #&gt; Rows: 5 #&gt; Columns: 10 #&gt; $ group &lt;chr&gt; &quot;a&quot;, &quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot; #&gt; $ a &lt;dbl&gt; 1, 4, NA, 3, 5 #&gt; $ b &lt;dbl&gt; 9, NA, 8, 10, 7 #&gt; $ c &lt;lgl&gt; TRUE, FALSE, NA, FALSE, TRUE #&gt; $ d &lt;chr&gt; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, NA, &quot;E&quot; #&gt; $ e &lt;fct&gt; tiny, small, medium, big, huge #&gt; $ f_col &lt;date&gt; NA, 2020-09-26, 2020-09-25, 2020-09-24, 2020-09-27 #&gt; $ g_col &lt;dttm&gt; 2020-09-24 02:24:00, 2020-09-25 04:48:00, 2020-09-26 07:12:00, 2020-09-27 09:36:00, NA #&gt; $ col_h &lt;list&gt; [&lt;1, 10&gt;, &lt;2, NA&gt;, &lt;3, 8&gt;, &lt;4, 7&gt;, &lt;5, 6&gt;] #&gt; $ col_i &lt;list&gt; [NULL, 3.14, &lt;&quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;&gt;, &lt;data.frame[150 x 5]&gt;, &lt;matrix[32 x 11]&gt;] 4.1 select() Columns 4.1.1 by Name df %&gt;% select(a) #&gt; # A tibble: 5 x 1 #&gt; a #&gt; &lt;dbl&gt; #&gt; 1 1 #&gt; 2 4 #&gt; 3 NA #&gt; 4 3 #&gt; 5 5 df %&gt;% select(a, c, e) #&gt; # A tibble: 5 x 3 #&gt; a c e #&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;fct&gt; #&gt; 1 1 TRUE tiny #&gt; 2 4 FALSE small #&gt; 3 NA NA medium #&gt; 4 3 FALSE big #&gt; 5 5 TRUE huge df %&gt;% select(b, d, f_col) #&gt; # A tibble: 5 x 3 #&gt; b d f_col #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;date&gt; #&gt; 1 9 A NA #&gt; 2 NA B 2020-09-26 #&gt; 3 8 C 2020-09-25 #&gt; 4 10 &lt;NA&gt; 2020-09-24 #&gt; 5 7 E 2020-09-27 df %&gt;% select(b, c, everything()) #&gt; # A tibble: 5 x 10 #&gt; b c group a d e f_col g_col col_h col_i #&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 9 TRUE a 1 A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 NA FALSE a 4 B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 8 NA b NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 10 FALSE b 3 &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 7 TRUE b 5 E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select(b, c, everything(), -a) #&gt; # A tibble: 5 x 9 #&gt; b c group d e f_col g_col col_h col_i #&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 9 TRUE a A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 NA FALSE a B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 8 NA b C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 10 FALSE b &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 7 TRUE b E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; cols_to_select &lt;- c(&quot;a&quot;, &quot;c&quot;, &quot;e&quot;) df %&gt;% select(all_of(cols_to_select)) #&gt; # A tibble: 5 x 3 #&gt; a c e #&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;fct&gt; #&gt; 1 1 TRUE tiny #&gt; 2 4 FALSE small #&gt; 3 NA NA medium #&gt; 4 3 FALSE big #&gt; 5 5 TRUE huge 4.1.2 by Index df %&gt;% select(1L) #&gt; # A tibble: 5 x 1 #&gt; group #&gt; &lt;chr&gt; #&gt; 1 a #&gt; 2 a #&gt; 3 b #&gt; 4 b #&gt; 5 b df %&gt;% select(1, 3, 5) #&gt; # A tibble: 5 x 3 #&gt; group b d #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 a 9 A #&gt; 2 a NA B #&gt; 3 b 8 C #&gt; 4 b 10 &lt;NA&gt; #&gt; 5 b 7 E df %&gt;% select(2, 4, 6) #&gt; # A tibble: 5 x 3 #&gt; a c e #&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;fct&gt; #&gt; 1 1 TRUE tiny #&gt; 2 4 FALSE small #&gt; 3 NA NA medium #&gt; 4 3 FALSE big #&gt; 5 5 TRUE huge df %&gt;% select(2:3, everything()) #&gt; # A tibble: 5 x 10 #&gt; a b group c d e f_col g_col col_h col_i #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 1 9 a TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 4 NA a FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 NA 8 b NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 3 10 b FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 5 7 b TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select(2:3, everything(), -1) #&gt; # A tibble: 5 x 9 #&gt; a b c d e f_col g_col col_h col_i #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; cols_to_select &lt;- c(1, 3, 5) df %&gt;% select(all_of(cols_to_select)) #&gt; # A tibble: 5 x 3 #&gt; group b d #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 a 9 A #&gt; 2 a NA B #&gt; 3 b 8 C #&gt; 4 b 10 &lt;NA&gt; #&gt; 5 b 7 E cols_to_select &lt;- c(1, 3, 5, 1000) df %&gt;% select(any_of(cols_to_select)) #&gt; # A tibble: 5 x 3 #&gt; group b d #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; #&gt; 1 a 9 A #&gt; 2 a NA B #&gt; 3 b 8 C #&gt; 4 b 10 &lt;NA&gt; #&gt; 5 b 7 E 4.1.3 by Name Pattern contains() selects a column if any part of its name contains match=. df %&gt;% select(contains(match = &quot;col&quot;)) #&gt; # A tibble: 5 x 4 #&gt; f_col g_col col_h col_i #&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; starts_with() selects a column if its name starts with match=. df %&gt;% select(starts_with(&quot;col_&quot;)) #&gt; # A tibble: 5 x 2 #&gt; col_h col_i #&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; starts_with() selects a column if its name ends with match=. df %&gt;% select(ends_with(&quot;_col&quot;)) #&gt; # A tibble: 5 x 2 #&gt; f_col g_col #&gt; &lt;date&gt; &lt;dttm&gt; #&gt; 1 NA 2020-09-24 02:24:00 #&gt; 2 2020-09-26 2020-09-25 04:48:00 #&gt; 3 2020-09-25 2020-09-26 07:12:00 #&gt; 4 2020-09-24 2020-09-27 09:36:00 #&gt; 5 2020-09-27 NA matches()s Selects a column if its name matches a regular expression pattern. df %&gt;% select(matches(&quot;(^\\\\w_)?col(_\\\\w)?&quot;)) #&gt; # A tibble: 5 x 4 #&gt; f_col g_col col_h col_i #&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 4.1.4 by Data Type df %&gt;% select(where(is.factor)) #&gt; # A tibble: 5 x 1 #&gt; e #&gt; &lt;fct&gt; #&gt; 1 tiny #&gt; 2 small #&gt; 3 medium #&gt; 4 big #&gt; 5 huge df %&gt;% select_if(is.factor) #&gt; # A tibble: 5 x 1 #&gt; e #&gt; &lt;fct&gt; #&gt; 1 tiny #&gt; 2 small #&gt; 3 medium #&gt; 4 big #&gt; 5 huge df %&gt;% select(where(is.factor), f_col) #&gt; # A tibble: 5 x 2 #&gt; e f_col #&gt; &lt;fct&gt; &lt;date&gt; #&gt; 1 tiny NA #&gt; 2 small 2020-09-26 #&gt; 3 medium 2020-09-25 #&gt; 4 big 2020-09-24 #&gt; 5 huge 2020-09-27 df %&gt;% select(a, !where(is.integer)) #&gt; # A tibble: 5 x 10 #&gt; a group b c d e f_col g_col col_h col_i #&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 1 a 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 4 a NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 NA b 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 3 b 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 5 b 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select(where(is.character) | where(is.factor)) #&gt; # A tibble: 5 x 3 #&gt; group d e #&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; #&gt; 1 a A tiny #&gt; 2 a B small #&gt; 3 b C medium #&gt; 4 b &lt;NA&gt; big #&gt; 5 b E huge df %&gt;% select(where(~ is.double(.) | is.list(.))) #&gt; # A tibble: 5 x 6 #&gt; a b f_col g_col col_h col_i #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 1 9 NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 4 NA 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 NA 8 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 4 3 10 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 5 5 7 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% select_if(~ is.character(.x) | is.factor(.x)) #&gt; # A tibble: 5 x 3 #&gt; group d e #&gt; &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; #&gt; 1 a A tiny #&gt; 2 a B small #&gt; 3 b C medium #&gt; 4 b &lt;NA&gt; big #&gt; 5 b E huge 4.2 filter() Rows 4.2.1 by row_number() df %&gt;% filter(row_number() == 1) #&gt; # A tibble: 1 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; df %&gt;% filter(row_number() &gt; 1) #&gt; # A tibble: 4 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 2 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 4.2.2 by Name df %&gt;% filter(a == 2) #&gt; # A tibble: 0 x 10 #&gt; # … with 10 variables: group &lt;chr&gt;, a &lt;dbl&gt;, b &lt;dbl&gt;, c &lt;lgl&gt;, d &lt;chr&gt;, e &lt;fct&gt;, f_col &lt;date&gt;, g_col &lt;dttm&gt;, col_h &lt;list&gt;, col_i &lt;list&gt; df %&gt;% filter(a != 2) #&gt; # A tibble: 4 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(c) #&gt; # A tibble: 2 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(!c) #&gt; # A tibble: 2 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 2 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; df %&gt;% filter(a == 5, d == &quot;E&quot;) #&gt; # A tibble: 1 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(a &gt;= 3 | f_col == &quot;2020-09-24&quot;) #&gt; # A tibble: 3 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 2 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 3 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(a &lt; 2 | c) #&gt; # A tibble: 2 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter(!is.na(a), !is.na(b), !is.na(d)) #&gt; # A tibble: 2 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 4.2.3 by Type df %&gt;% filter(across(where(is.numeric), ~ .x &gt;= 5)) #&gt; # A tibble: 1 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter_if(is.numeric, ~ .x &gt;= 5) #&gt; # A tibble: 1 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; df %&gt;% filter_if(is.list, ~ map_lgl(.x, ~ !is.null(.x))) #&gt; # A tibble: 4 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 2 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; #&gt; 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; 4.3 arrange() Rows df %&gt;% arrange(a) #&gt; # A tibble: 5 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 2 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 3 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 4 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; #&gt; 5 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; df %&gt;% arrange(desc(a)) #&gt; # A tibble: 5 x 10 #&gt; group a b c d e f_col g_col col_h col_i #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;fct&gt; &lt;date&gt; &lt;dttm&gt; &lt;list&gt; &lt;list&gt; #&gt; 1 b 5 7 TRUE E huge 2020-09-27 NA &lt;dbl [2]&gt; &lt;dbl[,11] [32 × 11]&gt; #&gt; 2 a 4 NA FALSE B small 2020-09-26 2020-09-25 04:48:00 &lt;dbl [2]&gt; &lt;dbl [1]&gt; #&gt; 3 b 3 10 FALSE &lt;NA&gt; big 2020-09-24 2020-09-27 09:36:00 &lt;dbl [2]&gt; &lt;df[,5] [150 × 5]&gt; #&gt; 4 a 1 9 TRUE A tiny NA 2020-09-24 02:24:00 &lt;dbl [2]&gt; &lt;NULL&gt; #&gt; 5 b NA 8 NA C medium 2020-09-25 2020-09-26 07:12:00 &lt;dbl [2]&gt; &lt;chr [5]&gt; "]
]
